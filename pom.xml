<?xml version="1.0" encoding="UTF-8"?>
<!--
    This is the Maven Project Object Model (POM) file for the Brainz Authentication module.
    It defines the project structure, dependencies, build plugins, and metadata for building and managing the application.

    ********************************
    Project Metadata & Structure
    ********************************
    - modelVersion: Specifies the POM model version (4.0.0 is standard for Maven 2+).
    - parent: Inherits configuration from Spring Boot's starter parent, which provides default plugin and dependency management.
    - groupId: The group (organization) for the project, used in artifact coordinates.
    - artifactId: The unique name for this module.
    - version: The current version of the project.
    - name: BrainZ.
    - description: Instagram of Ai's+Twitch+Game.

    ***************************
    Properties
    ***************************
    - java.version: Sets the Java version for compilation (Java 17 in this case).

    ***************************
    Dependencies
    ***************************
    Each dependency is used as follows:

    1. spring-boot-starter-data-jpa
       * Provides Spring Data JPA and Hibernate for ORM and database access.
       * Used in the service and repository layers for database operations.

    2. spring-boot-starter-mail
       * Enables sending emails (e.g., for verification, password reset).
       * Used in service classes that handle email notifications.

    3. h2 (scope: runtime)
       * In-memory database for testing.
       * Used in integration and unit tests to simulate database operations.

    4. spring-boot-starter-security
       * Adds Spring Security for authentication and authorization.
       * Used in security configuration and filters for protecting endpoints.

    5. spring-boot-starter-validation
       * Provides validation annotations (e.g., @Valid, @NotNull).
       * Used in DTOs and controller request validation.

    6. spring-boot-starter-web
       * Adds Spring MVC for building REST APIs.
       * Used in controllers and for exposing HTTP endpoints.

    7. lombok (optional: true)
       * Reduces boilerplate code (getters, setters, constructors).
       * Used throughout the codebase for model and DTO classes.

    8. spring-boot-starter-test (scope: test)
       * Provides testing libraries (JUnit, Mockito, etc.).
       * Used for writing and running unit/integration tests.

    9. spring-security-test (scope: test)
       * Adds helpers for testing Spring Security.
       * Used in security-related test cases.

    10. mysql-connector-j (scope: runtime)
        * MySQL JDBC driver for connecting to a MySQL database.
        * Used at runtime for production database connectivity.

    ***************************
    Build Section
    ***************************
    The <build> section configures how Maven builds the project.

    1. maven-compiler-plugin
       * Controls Java compilation.
       * annotationProcessorPaths: Ensures Lombok is available for annotation processing during compilation.
         This is necessary for Lombok to generate code at compile time.

    2. spring-boot-maven-plugin
       * Packages the application as an executable JAR (or WAR).
       * <excludes>: Excludes Lombok from the final artifact, as it is only needed at compile time.

    ***************************
    Extending the Build Section
    ***************************
    - You can add more plugins for:
        * Code coverage (e.g., jacoco-maven-plugin)
        * Static analysis (e.g., spotbugs-maven-plugin, checkstyle)
        * Docker image building (e.g., jib-maven-plugin)
        * Custom resource filtering, multi-module builds, etc.
    - You can also configure profiles for different environments (dev, prod, test) to customize dependencies and build behavior.

    ***************************
    Customization Tips
    ***************************
    - To add a new dependency, place it inside the <dependencies> section.
    - To add a new build plugin, add it under <build><plugins>.
    - To override properties (like Java version), change the <properties> section.
    - For multi-module projects, use <modules> and manage dependencies in a parent POM.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--
        modelVersion: Defines the version of the POM model.
        4.0.0 is the standard for Maven 2 and above.
    -->
    <modelVersion>4.0.0</modelVersion>

    <!--
        parent: Inherits configuration from Spring Boot's starter parent.
        This provides default plugin and dependency management, reducing boilerplate.
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.1</version>
        <relativePath/>
    </parent>

    <!--
        groupId: The group or organization for the project.
        artifactId: The unique name for this module.
        version: The current version of the project.
        name: Human-readable project name.
        description: Short description of the project.
    -->
    <groupId>com.brainz</groupId>
    <artifactId>authentication</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>authentication</name>
    <description>Creating advanced auth-system for Brainz</description>

    <!--
        properties: Project-wide properties.
        java.version: Sets the Java version for compilation.
    -->

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- Needed to support JSON (if not already included) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>



        <!-- Optional: for JWT decoding -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-jose</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Redis for Session/Cache -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- JWT Support -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.3</version>
        </dependency>
        <!-- API Documentation -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.7.0</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-common</artifactId>
            <version>2.7.0</version>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.3</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.3</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if you prefer -->
            <version>0.12.3</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Validation support for request/response objects -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
